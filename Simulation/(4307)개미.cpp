/*
문제
개미 여러 마리가 길이가 lcm인 막대 위에 있다.
각 개미의 이동 속도는 모두 일정하며, 1cm/s이다.
개미가 막대의 마지막까지 걸어간다면, 개미는 그 즉시 떨어지게 된다.
또, 두 개미가 만나게 된다면, 방향을 반대로 바꾸어 걸어가게 된다.

가장 처음에 막대 상에서 개미의 위치를 알고 있다.
하지만, 개미가 어느 방향으로 움직이는 지는 알 수가 없다.
이때, 모든 개미가 땅으로 떨어질 때까지 가능한 시간 중 가장 빠른 시간과 느린 시간을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 테스트 케이스의 개수가 주어진다.
각 테스트 케이스의 첫째 줄에는 막대의 길이와 개미의 수 n이 주어진다.
다음 n개 줄에는 숫자가 하나씩 주어지며, 이 숫자는 개미의 초기 위치를 나타낸다.
입력으로 주어지는 모든 수는 1,000,000보다 작거나 같으며, 공백으로 구분되어져 있다.

출력
각 테스트 케이스에 대해서, 두 숫자를 출력한다.
첫 번째 숫자는 개미가 모두 땅으로 떨어지는 가능한 시간 중 가장 빠른 시간, 두 번째 숫자는 가장 늦은 시간이다.

예제 입력 1
2
10 3
2
6
7
214 7
11
12
7
13
176
23
191

예제 출력 1
4 8
38 207
*/

#include <stdio.h>
#include <stdlib.h>
#pragma warning(disable: 4996)

#define inf 9999999

using namespace std;

int main() {

	int t, l, n, ant;
	int min, max, minDiff, maxDiff;

	scanf("%d", &t);

	for (int i = 0; i < t; i++) {
		scanf("%d %d", &l, &n);
		minDiff = inf;
		maxDiff = -1;

		for (int j = 0; j < n; j++) {
			scanf("%d", &ant);

			if (abs(l / 2 - ant) < minDiff) { // 중간 지점으로부터 가장 가까운 개미 찾기(가장 빨리 떨어지는 시간 구하기 위해)
				minDiff = abs(l / 2 - ant);
				
				if (l / 2 - ant > 0) { // 개미가 왼쪽 편에 있을 때(왼쪽으로 감)
					min = ant;
				}
				else { // 오른쪽 편에 있을 때(오른쪽으로 감)
					min = l - ant;
				}
			}

			if (abs(l / 2 - ant) > maxDiff) { // 중간 지점으로부터 가장 먼 개미 찾기(가장 늦게 떨어지는 시간 구하기 위해)
				maxDiff = abs(l / 2 - ant);
				
				if (l / 2 - ant > 0) { // 개미가 왼쪽 편에 있을 때(오른쪽으로 감)
					max = l - ant;
				}
				else { // 오른쪽 편에 있을 때(왼쪽으로 감)
					max = ant;
				}
			}
		}
		printf("%d %d\n", min, max); // 줄 바꿈 잘할 것(줄 바꿈 안해서 오답 처리)
	}

	return 0;
}